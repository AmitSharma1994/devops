A kubeconfig file is a configuration file used by Kubernetes to manage cluster access. It contains information about clusters, users, namespaces, and authentication mechanisms. This file allows you to specify which cluster to interact with and how to authenticate to it.

Overview of its key components:
    Clusters: Information about the Kubernetes clusters you want to connect to.
    Users: Credentials and authentication methods for accessing the clusters.
    Contexts: Combinations of clusters and users, allowing you to switch between different environments easily.
    Namespaces: Default namespaces for the contexts.
    You can usually find the kubeconfig file in your home directory under ~/.kube/config. You can also specify a different file using the --kubeconfig flag when running kubectl commands.

Contexts:contexts is combination of a cluster, a user, and a namespace. Contexts allow you to switch between different Kubernetes environments easily without having to specify the cluster, user, and namespace each time you run a kubectl command.

#this commond is use to see the current context.
    kubectl config current-context
#To switch to a different context for  use.
    kubectl config use-context <your-context-name>

#define the config file for differnt-diffrent context like env(dev,sit,prod)

apiVersion: v1
kind: Config
clusters:
- cluster:
    server: https://your-cluster-server
    certificate-authority: /path/to/ca.crt
  name: your-cluster-name
users:
- name: your-user-name
  user:
    client-certificate: /path/to/client.crt
    client-key: /path/to/client.key
contexts:
- context:
    cluster: your-cluster-name
    user: your-user-name
    namespace: your-namespace
  name: your-context-name
current-context: your-context-name

#If you have multiple clusters, you can manage them all within a single kubeconfig file by defining multiple clusters, users, and contexts. Each context will correspond to a different cluster and user combination, allowing you to switch between them easily by use contexts.
#Two clusters (cluster1 and cluster2) are defined.Two users (user1 and user2) are defined.Two contexts (context1 and context2) are defined, each linking a cluster with a user and a namespace.You can switch between these contexts using:

apiVersion: v1
kind: Config
clusters:
- cluster:
    server: https://cluster1-server
    certificate-authority: /path/to/cluster1-ca.crt
  name: cluster1
- cluster:
    server: https://cluster2-server
    certificate-authority: /path/to/cluster2-ca.crt
  name: cluster2
users:
- name: user1
  user:
    client-certificate: /path/to/user1-client.crt
    client-key: /path/to/user1-client.key
- name: user2
  user:
    client-certificate: /path/to/user2-client.crt
    client-key: /path/to/user2-client.key
contexts:
- context:
    cluster: cluster1
    user: user1
    namespace: namespace1
  name: context1
- context:
    cluster: cluster2
    user: user2
    namespace: namespace2
  name: context2
current-context: context1


kubectl config use-context context1
kubectl config use-context context2
